@page "/"

<PageTitle>Live Data</PageTitle>

<p role="status">Number of times message received from SignalR service : <span style="font-weight: bold;">@currentCount </span></p>

@foreach (var emp in EmployeesList)
{
    <p>@emp.Name | @emp.Title</p>
}

@using BlazorAzureSignalR.Data;
@using BlazorAzureSignalR.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@inject EmployeeService employeeService;
@inject NavigationManager Navigation
@code {

    List<Employee> EmployeesList = new List<Employee>();
    List<Employee> EmployeesListRefresh = new List<Employee>();


    // List<Employee> EmployeesListRefresh = new List<Employee>()
    // {
    // new Employee() { Id = 001, Name = "Tom", Title= "Sales"},
    // new Employee() { Id = 004, Name = "Joan", Title= "HR"},
    // new Employee() { Id = 003, Name = "Fred", Title= "Accounting" },
    // };


    private HubConnection? hubConnection;
    protected readonly string SignalServerUri = "https://azuretrigger20240817184133.azurewebsites.net/api/";

    protected override async Task OnInitializedAsync()
    {
        EmployeesList =  await employeeService.GetAllEmployees();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(SignalServerUri)
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("lanId123", async employees =>
        {
            // await EmployeesRefresh();
            // EmployeesList = EmployeesListRefresh;
            string[] value_split = employees.Split("|");
            Employee employee = new Employee
            {
                Name = value_split[0],
                Title = value_split[1]
            };
            EmployeesList.Add(employee);
            IncrementCount();
            StateHasChanged();
        });

        hubConnection.On<string>("all", async employees =>
        {
            // await EmployeesRefresh();
            // EmployeesList = EmployeesListRefresh;
            string[] value_split = employees.Split("|");
            Employee employee = new Employee
            {
                Name = value_split[0],
                Title = value_split[1]
            };
            EmployeesList.Add(employee);
            IncrementCount();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    // private async Task EmployeesRefresh()
    // {
    //     EmployeesListRefresh = await employeeService.GetAllEmployeesRefresh();
    // }

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
